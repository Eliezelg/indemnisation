// Prisma schema for Indemnisation platform
// Database: PostgreSQL 15

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // bcrypt hashed
  firstName       String
  lastName        String
  phone           String?
  role            UserRole @default(USER)
  emailVerified   Boolean  @default(false)
  preferredLocale String   @default("fr") // fr, he, en
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  claims          Claim[]

  @@index([email])
}

// ============================================
// CLAIMS
// ============================================

model Claim {
  id                   String         @id @default(cuid())
  claimNumber          String         @unique // CLM-2025-000001
  userId               String

  // Flight information
  flightNumber         String
  flightDate           DateTime
  departureAirport     String         // IATA code
  arrivalAirport       String         // IATA code
  airline              String?

  // Disruption details
  disruptionType       DisruptionType
  delayMinutes         Int?

  // Passenger info (JSON for flexibility)
  passengerInfo        Json

  // Compensation calculations
  calculatedAmountEU   Decimal?       @db.Decimal(10,2)
  calculatedAmountIL   Decimal?       @db.Decimal(10,2)
  recommendedAmount    Decimal?       @db.Decimal(10,2)
  jurisdiction         Jurisdiction?
  distance             Float?

  // Workflow
  status               ClaimStatus    @default(DRAFT)
  submittedAt          DateTime?

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  // Relations
  user                 User           @relation(fields: [userId], references: [id])
  documents            Document[]
  notes                ClaimNote[]

  @@index([userId])
  @@index([claimNumber])
  @@index([status])
  @@index([flightDate])
}

// ============================================
// ENUMS
// ============================================

enum DisruptionType {
  DELAY
  CANCELLATION
  DENIED_BOARDING
}

enum Jurisdiction {
  EU
  ISRAEL
  BOTH
}

enum ClaimStatus {
  DRAFT           // Not submitted yet
  SUBMITTED       // Submitted, pending review
  IN_REVIEW       // Being reviewed by admin
  APPROVED        // Approved for processing
  REJECTED        // Rejected
  PAID            // Compensation paid
  CANCELLED       // Cancelled by user
}

// ============================================
// AIRPORTS (for distance calculation)
// ============================================

model Airport {
  id          String  @id @default(cuid())
  iata        String  @unique // 3-letter IATA code (CDG, TLV, etc.)
  name        String
  city        String
  country     String  // ISO 2-letter code (FR, IL, US, etc.)
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())

  @@index([iata])
  @@index([country])
}

// ============================================
// DOCUMENTS (supporting documents for claims)
// ============================================

model Document {
  id              String      @id @default(cuid())
  claimId         String
  fileName        String      // Original filename
  fileType        String      // MIME type (image/jpeg, application/pdf, etc.)
  fileSize        Int         // Size in bytes
  filePath        String      // Storage path
  documentType    DocumentType
  uploadedAt      DateTime    @default(now())

  // Relations
  claim           Claim       @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
}

enum DocumentType {
  BOARDING_PASS       // Carte d'embarquement
  BOOKING_CONFIRMATION // Confirmation de réservation
  ID_DOCUMENT         // Pièce d'identité
  PROOF_OF_DELAY      // Preuve du retard (certificat de retard)
  OTHER               // Autre document
}

// ============================================
// CLAIM NOTES (internal admin notes)
// ============================================

model ClaimNote {
  id          String   @id @default(cuid())
  claimId     String
  content     String   @db.Text
  createdBy   String   // User ID (admin qui a créé la note)
  createdAt   DateTime @default(now())

  // Relations
  claim       Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
  @@index([createdAt])
}
